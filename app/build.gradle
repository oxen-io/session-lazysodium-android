/*
 * Copyright (c) Terl Tech Ltd • 04/04/2020, 00:05 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

import java.security.Signature

plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}

ext {
    artifactId = "lazysodium-android"
    groupId = "com.goterl"
    version = '5.0.3'
    description = "Lazysodium (Android) makes it effortless for Android " +
            "developers to get started with Libsodium's cryptography."
    androidTestDir = "src/androidTest/java/com/goterl/lazysodium"
    javaTestDir = "../session-lazysodium-java/src/test/java/com/goterl/lazysodium"

    jUnitVersion = "4.13.2"
    androidXJUnitVersion = "1.1.3"
    androidXEspressoVersion = "3.3.0"
    androidXTestingCoreVersion = "2.1.0"
    androidXTestCoreVersion = "1.4.0"
    kotlinCoroutinesVersion = "1.5.2"
}

group project.ext.groupId
version = project.ext.version

android {
    compileSdkVersion 32
    buildToolsVersion "30.0.3"
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 32
        versionCode 16
        versionName project.ext.version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Typically we would need to clear data between every run
        // but we don't need to in this test suite as we aren't
        // running conventional espresso tests. Speeds up tests 2x.
        // testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDirs = ['src/main/jniLibs']

        java {
            srcDir "../session-lazysodium-java/src/main/java"
            // Be sure to update lint.xml in the project root if any other
            // excluded files are added.
            exclude "com/goterl/lazysodium/utils/LibraryLoader.java"
            exclude "com/goterl/lazysodium/SodiumJava.java"
            exclude "com/goterl/lazysodium/LazySodiumJava.java"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }

    packagingOptions {
        exclude '../session-lazysodium-java/src/test/java'
    }

    testOptions {
        animationsDisabled = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
}

void loadProps() {
    File secretPropsFile = project.rootProject.file('local.properties')
    if (secretPropsFile.exists()) {
        Properties p = new Properties()
        new FileInputStream(secretPropsFile).withCloseable { is ->
            p.load(is)
        }
        p.each { name, value ->
            ext[name] = value
        }
    } else {
        ext.isCi = true
    }
}

loadProps()

// Return an empty string if a property
// cannot be found
String getProp(String propName) {
    if (ext.hasProperty(propName) != null) {
        return ext[propName]
    } else {
        ""
    }
}

String getSonatypeUserName() {
    return findProperty("ossrhUsername")
}

String getSonatypePassword() {
    return findProperty("ossrhPassword")
}

// Don't export documentation
tasks.withType(Javadoc).all { enabled = false }

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'net.java.dev.jna:jna:5.9.0@aar'

    // Test libs
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "androidx.arch.core:core-testing:$androidXTestingCoreVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
    testImplementation "androidx.test:runner:$androidXTestCoreVersion"

    androidTestImplementation "androidx.test:core:$androidXTestCoreVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidXJUnitVersion"
    androidTestImplementation "androidx.test:rules:$androidXTestCoreVersion"
    androidTestImplementation "androidx.test:runner:$androidXTestCoreVersion"
    androidTestUtil "androidx.test:orchestrator:$androidXTestCoreVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidXEspressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$androidXEspressoVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$androidXTestingCoreVersion"
}

Signature.metaClass.getToSignArtifact = { ->
    return (delegate as Signature).source
}

// Tasks
signing {
    // This will use the GPG Agent
    // to sign the jar
    useGpgCmd()
    sign publishing.publications
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


task signPom(type: Sign) {
    sign project.file("$buildDir/publications/mavenJava/pom-default.xml")

    // The signing plugin does not seem to notice
    // it when the publications folder with the
    // signature has been deleted. So we always
    // create a new signature
    outputs.upToDateWhen { false }
}

artifacts {
    archives sourcesJar, javadocJar
}

Closure createPomClosure = {
    def root = asNode()
    root.appendNode('description', project.ext.description)
    root.appendNode('name', project.ext.artifactId)
    root.appendNode('url', 'https://github.com/terl/lazysodium-android')

    def scm = root.appendNode('scm')
    scm.appendNode("connection", "scm:git:git://github.com/terl/lazysodium-android.git")
    scm.appendNode("developerConnection", "scm:git:ssh://github.com/terl/lazysodium-android")
    scm.appendNode("url", "http://github.com/terl/lazysodium-android")

    def license = root.appendNode('licenses').appendNode('license')
    license.appendNode('name', 'Mozilla Public License, Version 2.0')
    license.appendNode('url', 'http://www.mozilla.org/MPL/2.0/index.txt')
    license.appendNode('distribution', 'repo')

    def developer = root.appendNode('developers').appendNode('developer')
    developer.appendNode('name', 'Terl Tech Ltd')
    developer.appendNode('email', 'hello@terl.co')

    def dependenciesNode = root.appendNode('dependencies')
    configurations.implementation.allDependencies.each {
        if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.group)
            dependencyNode.appendNode('artifactId', it.name)
            dependencyNode.appendNode('version', it.version)
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            snapshot(MavenPublication) {
                groupId project.ext.groupId
                artifactId project.ext.artifactId
                version project.ext.version + "-SNAPSHOT"

                artifact bundleReleaseAar
                artifact sourcesJar
                artifact javadocJar

                pom.withXml createPomClosure
            }
            release(MavenPublication) {
                groupId project.ext.groupId
                artifactId project.ext.artifactId
                version project.ext.version

                artifact bundleReleaseAar
                artifact sourcesJar
                artifact javadocJar

                pom.withXml createPomClosure
            }
        }

        repositories {
            maven {
                name = "release"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username getSonatypeUserName()
                    password getSonatypePassword()
                }
            }
            maven {
                name = "snapshot"
                url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                credentials {
                    username getSonatypeUserName()
                    password getSonatypePassword()
                }
            }
        }
    }
}
